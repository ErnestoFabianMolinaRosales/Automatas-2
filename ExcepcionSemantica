/**
 * JavaCC template file created by SF JavaCC plugin1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Parser)
package edu.itsco;
import java.util.ArrayList;

public class Parser
{
  private static ArrayList<Variable > listaVariables;
  
  public static void main(String args [ ])
  {
     listaVariables = new ArrayList <Variable >();
     Parser parser = new Parser(System.in);
    try {
    	System.out.println("MI COMPILADOR");
    	System.out.println("-------------");
   		parser.gramaticaPrincipal();
    	System.out.println("YA JALO");
    } catch (ParseException pex) {
      		System.err.println(pex.getMessage());
       }catch(ExcepcionSemantica es) {
     		System.err.println(es.getMessage());	
       }
    
  }

  private static boolean existeVariable(Variable variable)
  {
    return listaVariables.contains(variable);
  }

  private static void agregarVariable (Variable variable)
  throws ExcepcionSemantica {
    if(!existeVariable(variable))
	    {
	      listaVariables.add(variable);
	    }else {
	      throw new ExcepcionSemantica(variable, ExcepcionSemantica.Tipo.VARIABLE_DUPLICADA);
	    } 
    }

    private static void variableDefinida(Variable variable) throws ExcepcionSemantica{
      if(!existeVariable(variable))
      {
        throw new ExcepcionSemantica(variable, ExcepcionSemantica.Tipo.VARIABLE_NO_DEFINIDA);
        }
    }
 
}
PARSER_END(Parser)



SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}



//PALABRAS RESERVADAS
TOKEN:
{
  < ENTERO: "entero" >
| < CADENA: "cadena" >
| < DECIMAL: "decimal" >

| < ESCRIBE: "escribe">
| < LEE: "lee" >

| < SI: "si" >
| < SINO: "sino" >

| < CAMBIAR: "cambiar" >
| < CASO: "caso" >
| < ROMPER: "romper" >
| < XDEFECTO: "xdefecto" >

| < PARA: "para" >

| < MIENTRAS: "mientras" >
| < HACER: "hacer" >

| < INICIO: "inicio" >
}



//SIMBOLOS Y OPERADORES
TOKEN:
{
  < MAS: "+" >
| < MENOS: "-" >
| < POR: "*" >
| < DIVISION: "/" >
| < RESIDUO: "%" >
| < IGUAL: "=" >

| < MAYOR: ">" >
| < MENOR: "<" >

| < AND: "&&" >
| < OR: "||" >
| < NOT: "!" >

| < AP: "(" >
| < CP: ")" >

| < ALL: "{" >
| < CLL: "}" >

| < PC: ";" >
| < PP: ":" >
}



//TOKEN'S DINAMICOS
TOKEN:
{
  < #digitos: ["0" - "9"] >
| < #letras: ["a" - "z","A" - "Z"] >
| < ID: (<letras>|"_")(<letras>|<digitos>|"_")* >

| < VALOR_ENTERO: (<digitos>)+ >
| < VALOR_DECIMAL: (<digitos>)+"."(<digitos>)+ >
| < VALOR_CADENA: "\""(~["\""])+ "\"" >  
}



//SECCION DE GRAMATICA
void gramaticaPrincipal()throws ExcepcionSemantica:{ }
{
  <INICIO> <ID> <ALL>
	gramaticaSentencias()
  <CLL>
 }



void gramaticaSentencias() throws ExcepcionSemantica: { }
{
  (
    gramaticaDeclararVariables()
    | gramaticaLeer()
    | gramaticaEscribir()
    | gramaticaSi()
    | gramaticaMientras()
    | gramaticaHacerMientras()
    | gramaticaCambiar()
    | gramaticaAsignacion()
    | gramaticaPara()
  )+
}



void gramaticaDeclararVariables()
throws ExcepcionSemantica: {
 	Token id;
 	Token tipoDato;
}
{
  tipoDato = tipoDato( ) id = <ID>
  {
    Variable v = new Variable(id.image, tipoDato.image);
  }
   [<IGUAL> valor()
   { v.setInicializada(true); }
   ]
   { agregarVariable(v);}
    <PC> 
}

    
Token tipoDato():
{
  Token tipoDato;
}
{
  (
  	tipoDato = <ENTERO> 
  	| tipoDato = <CADENA>
  	| tipoDato= <DECIMAL>
  )
  {
   return tipoDato ;
  }
}     



void valor()throws ExcepcionSemantica:{
  Token id;
  }
{
  (
	  <VALOR_ENTERO>
	  | <VALOR_CADENA>
	  | <VALOR_DECIMAL>
	  | id = <ID>
   
   {
    Variable v = new Variable();
    v.setId(id.image);
    variableDefinida(v);
  }
  )
}



void gramaticaLeer()throws ExcepcionSemantica:{
  Token id;
  
  }
{
  <LEE> <AP> id = <ID> <CP> <PC>
  {
    Variable v = new Variable();
    v.setId(id.image);
    variableDefinida(v);
  }
}



void gramaticaEscribir()throws ExcepcionSemantica:{}
{
  <ESCRIBE> <AP> valor()(<MAS> valor())* <CP> <PC>
}



void gramaticaSi()throws ExcepcionSemantica:{}
{
  <SI> <AP> condicion() <CP>
  <ALL>
  gramaticaSentencias()
  <CLL>
  [<SINO> <ALL> gramaticaSentencias() <CLL>]  
}



void condicion()throws ExcepcionSemantica:{}
{
  evaluacionSimple() (opLogico() evaluacionSimple())*
}



void evaluacionSimple()throws ExcepcionSemantica:{}
{
  valor() opRelacional() valor()
}



void opRelacional():{}
{
  <MAYOR> [<IGUAL>]
| <MENOR> [<IGUAL>]
| <NOT> <IGUAL>
| <IGUAL> <IGUAL>
}


    
void opLogico():{}
{ <AND> | <OR>}
 


void gramaticaMientras()throws ExcepcionSemantica:{}
{
  <MIENTRAS> <AP> condicion() <CP>
  <ALL> gramaticaSentencias() <CLL>
}


	
void gramaticaHacerMientras() throws ExcepcionSemantica:{}
{
  <HACER> <ALL> gramaticaSentencias() <CLL>
  <MIENTRAS> <AP> condicion() <CP> <PC>
}



void gramaticaCambiar()throws ExcepcionSemantica:{}
{
  <CAMBIAR> <AP> <ID> <CP>
  <ALL>
  (<CASO> <VALOR_ENTERO> <PP> gramaticaSentencias()<ROMPER> <PC>)+
  [<XDEFECTO> gramaticaSentencias()[<ROMPER> <PC>]]
  <CLL>
}



void gramaticaAsignacion()throws ExcepcionSemantica:{
 Token id;
  }
{
   id = <ID> <IGUAL> operacionSimple() <PC>
   {
    Variable v = new Variable();
    v.setId(id.image);
     }
   }




void operacionSimple()throws ExcepcionSemantica:{}
{
  (valor()|operacionParentesis())
  (operadorAritmetico() (valor()| operacionParentesis()))*
}



void operacionParentesis()throws ExcepcionSemantica:{}
{ <AP> operacionSimple() <CP> }



void operadorAritmetico():{}
{ <MAS> | <MENOS> | <POR> | <DIVISION> | <RESIDUO> }

                                                                     

void gramaticaPara()throws ExcepcionSemantica:{}
{
  <PARA> <AP> <ID> <IGUAL> valor() <PC> condicion() <PC>
  <ID> ( <MAS> <MAS> | <MENOS> <MENOS> | <IGUAL> operacionSimple()) <CP>
  <ALL >
  gramaticaSentencias()
  <CLL>
}




package edu.itsco;

import java.util.Objects;

public class Variable 
{
	private String id;
	private String tipoDato;
	private boolean inicializada;
	
	public Variable() {}
	
	public Variable(String id, String tipoDato)
	{
		this.id = id;
		this.tipoDato = tipoDato;
	}
	
	
	public String getId() {
		return id;
	}
	public void setId(String id) {
		this.id = id;
	}
	public String getTipoDato() {
		return tipoDato;
	}
	public void setTipoDato(String tipoDato) {
		this.tipoDato = tipoDato;
	}
	public boolean isInicializada() {
		return inicializada;
	}
	public void setInicializada(boolean inicializada) {
		this.inicializada = inicializada;
	}
	
	
	@Override
	public boolean equals(Object obj)
	{
		if (obj instanceof Variable)
		{
			Variable v= (Variable) obj;
			return v.hashCode() == this.hashCode();
		}
		return false;
	}
	
	@Override
	public int hashCode() 
	{
		int hash = 8;
		return hash * 54 + Objects.hashCode(this.id);
	}
	
	
}

package edu.itsco;

public class ExcepcionSemantica extends Exception{
	
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public enum Tipo{
		VARIABLE_NO_DEFINIDA, VARIABLE_NO_INICIALIZADA, 
		VARIABLE_DUPLICADA, TIPOS_NO_COINCIDEN
	}
	
	public ExcepcionSemantica() 
	{
		super();
	}
	
	public ExcepcionSemantica(Variable variable, Tipo tipo) 
	{
		super (obtenerMensaje(variable,tipo));
	}
	
	private static String obtenerMensaje(Variable variable, Tipo tipo)
	{
		String mensaje = null;
		switch(tipo)
		{
		case VARIABLE_DUPLICADA:
			mensaje = "La variable " + variable.getId() + " YA ESTA DECLARADA";
			break;
		case VARIABLE_NO_DEFINIDA:
			mensaje = "La variable " + variable.getId() + " NO ESTA DECLARADA";
			break;
		case VARIABLE_NO_INICIALIZADA:
			mensaje = "La variable " + variable.getId() + " NO SE HA INICIADO";
			break;
		case TIPOS_NO_COINCIDEN:
			mensaje = "LOS TIPOS NO CONINSIDEN " + variable.getId() ;
			break;
		}
		return mensaje;
	}


}
